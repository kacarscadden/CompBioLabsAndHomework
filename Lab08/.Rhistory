library(doBy)
?summaryBy
trial<-summaryBy(.~Row.Labels, data=abAll,FUN=sum)
head(trial)
trial<-summaryBy(.~Row.Labels, data=abAll,FUN=sum, keep.names=T)
head(trial)
head(abAll)
names(abAll)
trial<-summaryBy(abAll[,c(18:99,101:103)]~Row.Labels, data=abAll,FUN=sum, keep.names=T)
head(trial)
?ddply
?colSums
names(abAll)
trial = ddply(abAll, .(Row.Labels), function(x) colSums(x[c(18:99,101:103)]))
head(trial)
abAllSum <- ddply(abAll, .(Row.Labels), function(x) colSums(x[c(18:99,101:103)]))
head(beesp)
unique(beesp$Code)
beesp$Code[beesp$Code=="Try.frid"]<-"Try.frig"
unique(beesp$Code)
str(beesp)
beesp$Code[beesp$Code=="Try.frid"]
beesp<-read.csv("~/Documents/BEEFD/Rcode/BEEFDdatasetMar16_Species2.csv")
beesp[beesp == "-" ]<- NA
beesp<-beesp[order(beesp$Code),] #ordering rows (sp)
unique(beesp$Code) #has Try.frid and Try.lact instead
levels(beesp$Code)[levels(beesp$Code)=="Try.frid"]<-"Try.frig"
levels(beesp$Code)[levels(beesp$Code)=="Try.lact"]<-"Try.lac"
unique(beesp$Code)
head(abAllSum)
names(abAllSum)
length(abAllSum)
abAllSum<-abAllSum[,c(names(abAllSum)[1],sort(names(abund)[2:length(AbAllSum)]))]
abAllSum<-abAllSum[,c(names(abAllSum)[1],sort(names(abAllSum)[2:length(abAllSum)]))]
head(abAllSum)
hist(colSums(abAllSum[-1]))
head(beesp)
traits<-beesp[,c(2:19,22,25,26)]
traits2<-melt(traits,id.vars=c(1:6,10:21))
traits2<-traits2[order(traits2[,1]),]
traits2$variable<-gsub('t','',traits2$variable)
traits2$variable<-as.numeric(traits2$variable)
df<-ddply(traits2,.(Code),summarise,tsizeAvg=weighted.mean(variable,value,na.rm=T))
traits3<-merge(traits,df,by="Code",all=T)
head(traits3)
str(beesp)
traits3$nest.mat<-as.factor(traits3$nest.mat)
traits3$pol.col<-as.factor(traits3$pol.col)
traits3$prey.type<-as.factor(traits3$prey.type)
traits3$lecty<-as.factor(traits3$lecty)
traits3$IT<-as.numeric(as.character(traits3$IT))
traits3$Emer.Mean<-as.numeric(as.character(traits3$Emer.Mean))
str(traits3)
traits3$volt[traits3$volt==1]<-0
traits3$volt[traits3$volt==2]<-1
traits3bee<-traits3[traits3$Group=="B",c(1,12,14:22)]
traits3wasp<-traits3[traits3$Group=="W",c(1,12,14:22)]
unique(traits3$Group)
traits3bee<-traits3[traits3$Group=="B",c(1,12,14:22)]
traits3wasp<-traits3[traits3$Group=="W",c(1,12,14:22)]
traits3bee$Code<-droplevels(traits3bee$Code)
traits3wasp$Code<-droplevels(traits3wasp$Code)
traits3bee[,c(2,8:11)]<-decostand(traits3bee[,c(2,8:11)],"standardize",na.rm=T)
rownames(traits3bee)<-traits3bee$Code
traits3bee<-traits3bee[,-1] #only contains traits, w sp names as rownames
names(traits3bee) #volt (binary) is variable 6 now
colnames(abAllSum)
rownames(abAllSum)
?rownames
rownames(abAllSum)<-abAllSum[,1]
rownames(abAllSum)
abAllSum<-abAllSum[,-1]
ncol(abAllSum)
length(unique(traits3bee$Code))
names(traits3bee)
str(names(traits3bee))
rownames(traits3bee)
length(rownames(traits3bee))
traits3bee<-traits3bee[intersect(rownames(traits3bee), colnames(abAllSum)),]
length(rownames(traits3bee))
ncol(abAllSum)
head(abAllSum)
abAllSum_pared<-abAllSum[,intersect(rownames(traits3bee), colnames(abAllSum))]
ncol(abAllSum_pared)
traits3bee<-traits3[traits3$Group=="B",c(1,12,14:22)]
traits3bee<-traits3bee[intersect(rownames(traits3bee), colnames(abAllSum)),]
traits3bee_st<-traits3bee
traits3bee_st[,c(2,8:11)]<-decostand(traits3bee_st[,c(2,8:11)],"standardize",na.rm=T)
hist(traits3bee$volt)
hist(traits3bee$volt)
str(traits3bee)
?hist
traits3bee$volt
beesp<-read.csv("~/Documents/BEEFD/Rcode/BEEFDdatasetMar16_Species2.csv")
beesp<-beesp[order(beesp$Code),] #ordering rows (sp)
unique(beesp$Code) #has Try.frid and Try.lact instead
levels(beesp$Code)[levels(beesp$Code)=="Try.frid"]<-"Try.frig" #to re-label levels of a factor (Code)
levels(beesp$Code)[levels(beesp$Code)=="Try.lact"]<-"Try.lac"
beesp[beesp == "-" ]<- NA
traits<-beesp[,c(2:19,22,25,26)]
traits2<-melt(traits,id.vars=c(1:6,10:21))
traits2<-traits2[order(traits2[,1]),]
traits2$variable<-gsub('t','',traits2$variable)
traits2$variable<-as.numeric(traits2$variable)
df<-ddply(traits2,.(Code),summarise,tsizeAvg=weighted.mean(variable,value,na.rm=T))
traits3<-merge(traits,df,by="Code",all=T)
head(traits3)
traits3$nest.mat<-as.factor(traits3$nest.mat)
traits3$pol.col<-as.factor(traits3$pol.col)
traits3$prey.type<-as.factor(traits3$prey.type)
traits3$lecty<-as.factor(traits3$lecty)
traits3$IT<-as.numeric(as.character(traits3$IT))
traits3$Emer.Mean<-as.numeric(as.character(traits3$Emer.Mean))
traits3$volt[traits3$volt==1]<-0
traits3$volt[traits3$volt==2]<-1
head(traits3)
str(traits3)
names(traits3)
traits3bee<-traits3[traits3$Group=="B",c(1,12,14:22)]
traits3wasp<-traits3[traits3$Group=="W",c(1,12,14:22)]
hist(traits3bee$volt)
rownames(traits3bee)<-traits3bee$Code
traits3bee<-traits3bee[,-1] #only contains traits, w sp names as rownames
names(traits3bee)
head(traits3bee)
traits3bee<-traits3bee[intersect(rownames(traits3bee), colnames(abAllSum)),]
traits3bee_st<-traits3bee
names(traits3bee)
str(traits3bee)
traits3bee_st<-traits3bee
traits3bee_st[,c(1,7:10)]<-decostand(traits3bee_st[,c(1,7:10)],"standardize",na.rm=T)
hist(traits3bee$volt)
hist(traits3wasp$volt)
dbFD(traits3bee_st,abAllSum_pared,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F)
head(abAllSum_pared)
length(which(rowSums(abAllSum_pared)>0))
noBeeComm<-length(which(rowSums(abAllSum_pared)>0))
length(which(rowSums(abAllSum_pared)<0))
str(abAllSum_pared)
length(which(rowSums(abAllSum_pared)==0))
noBeeComm<-length(which(rowSums(abAllSum_pared)==0))
abAllSum_pared<-abAllSum_pared[which(rowSums(abAllSum_pared)>0),]
length(abAllSum_pared)
nrow(abAllSum_pared)
dbFD(traits3bee_st,abAllSum_pared,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F)
dbFD(traits3bee_st,abAllSum_pared,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F, corr="cailliez")
names(abAllSum_pared)
names(traits3bee_st)
identical(names(abAllSum_pared),rownames(traits3bee_st))
rownames(traits3bee_st)
hist(rowSums(abAllSum_pared))
fdAllYr<-dbFD(traits3bee_st,abAllSum_pared,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F, corr="cailliez")
fdAllYr
?dbFD
rowSums(abAllSum_pared)
?specnumber
library(vegan)
head(abAllSum_pared)
specnumber(abAllSum_pared,groups=rownames(abAllSum_pared))
sr<-specnumber(abAllSum_pared,groups=rownames(abAllSum_pared))
hist(sr)
which(sr>2)
length(which(sr>2))
sr3orMore<-length(which(sr>2))
length(sr)
diffSr<-length(sr)-sr3orMore
diffSr
abAllSum_pared[which(specnumber(abAllSum_pared,groups=rownames(abAllSum_pared))>2),]
abAllSum_paredSR<-abAllSum_pared[which(specnumber(abAllSum_pared,groups=rownames(abAllSum_pared))>2),]
length(abAllSum_paredSR)
nrow(abAllSum_paredSR)
sr3orMore
identical(nrow(abAllSum_paredSR),sr3orMore)
dbFD(traits3bee_st,abAllSum_paredSR,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F, corr="cailliez")
head(abAllSum_paredSR)
abAllSum_paredSR<-abAllSum_paredSR[,which(colSums(abAllSum_paredSR)>0)]
str(abAllSum_paredSR)
dbFD(traits3bee_st,abAllSum_paredSR,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F, corr="cailliez")
traits3bee_paredSR<-traits3bee[intersect(rownames(traits3bee), colnames(abAllSum_paredSR)),]
traits3bee_paredSR_st<-traits3bee_paredSR
head(traits3bee_paredSR)
traits3bee_paredSR_st[,c(1,7:10)]<-decostand(traits3bee_paredSR_st[,c(1,7:10)],"standardize",na.rm=T)
dbFD(traits3bee_paredSR_st,abAllSum_paredSR,w.abun=T, asym.bin=6, calc.CWM = T,calc.FGR = F, corr="cailliez")
beeDis<-gowdis(traits3bee_st,asym.bin = 6)
beeDis
names(traits3bee_st)
traitEG<-traits3bee_st[,c(2:6,10)]
dbFD(traitEG,abAllSum,w.abun=T, asym.bin="volt", calc.CWM = T,calc.FGR = F, corr="cailliez")
dbFD(traitEG,abAllSum_pared,w.abun=T, asym.bin="volt", calc.CWM = T,calc.FGR = F, corr="cailliez")
dbFD(traitEG,abAllSum_pared,w.abun=T, asym.bin="volt",calc.FGR = F, corr="cailliez") #STILL have 'invalid first argument' error #calc.CWM = T
dbFD(traitEG,abAllSum_pared,w.abun=T,calc.FGR = F, corr="cailliez") #STILL have 'invalid first argument' error #calc.CWM = T   asym.bin="volt"
(2 + 4 * 6) / 2 - 10
((2 + 4) * 6) / 2 - 10
x <- 4 * 8
x
X
?sqrt
example(sqrt)
?seq
ex1 <- c (1, 5, 8, 9)
ex2 <- c( 1, 10:15)
ex3 <- c(1, 5, seq(from=1, to=10, by=2.2))
ex3
ex4 <- c(rep(5, 3), rep(3, 5), seq(from=-5, to=0))
ex4
summary(cars)
a<-2
a
b<-c(1,2,10,11.2,14)
b
class(b)
b+a
c<-c(1,5,6,19,20)
c*a
group_a<-c(1:10)
group_a
group_b<-c(5:20)
group_b
boxplot(group_a,group_b)
boxplot(group_a,group_b,
xlab="groups",ylab="y values",
names=c("a","b"))
attach(iris)
str(iris)
plot(x=Sepal.Length, y=Petal.Width,
xlab="Sepal Length", ylab="Petal Width")
mod<-lm(Petal.Width~Sepal.Length)
coefficients(mod)
abline(mod)
a<-2
a
A
b<-c(1,2,10,11.2,14)
b
a+b
group_a<-c(1:10)
group_a
group_b<-c(5:20)
group_b
boxplot(group_a, group_b)
boxplot(group_a, group_b,
xlab="groups",ylab="y values",
names=c("a","b"))
groups
attach(iris)
str(iris)
plot(x=Sepal.Length, y=Petal.Width)
plot(x=Sepal.Length, y=Petal.Width,
xlab="Sepal Length",ylab="Petal Width")
mod<-lm(Petal.Width ~ Sepal.Length)
mod<-lm(Petal.Width ~ Sepal.Length)
mod<-lm(Petal.Width ~ Sepal.Length)
coefficients(mod)
lm(Petal.Width ~ Sepal.Length)
abline(mod)
plot(x=Sepal.Length, y=Petal.Width,
xlab="Sepal Length",ylab="Petal Width",
main="floral traits")
a <- 2
a <- 2
a
A
newTreatment<-5
newTreatment
b<-c(1,2,3)
b
b[2]
b<-c(1,20,30)
b<-c(1,20,30)
b
b[2]
b<-c(1,2,10,11.2,14)
b
a+b
c<-c(1,2,3)
c
c*a
group_a<-c(1:10)
group_a
group_b<-c(5:20)
group_b
boxplot(group_a,group_b)
boxplot(group_a,group_b,
xlab="groups",ylab="y values",main="toy plot")
names=c("a","b"))
boxplot(group_a,group_b,
xlab="groups",ylab="y values",main="toy plot",
names=c("a","b"))
boxplot(group_a,group_b,
xlab="groups",ylab="y values",main="toy plot",
names=c("a","b"),color=c("blue","pink"))
boxplot(group_a,group_b,
xlab="groups",ylab="y values",main="toy plot",
names=c("a","b"),col=c("blue","pink"))
boxplot(group_a,group_b,
xlab="groups",ylab="y values",main="toy plot",
names=c("a","b"),col=c("blue","pink"))
str(iris)
plot(x=Sepal.Length, y=Petal.Width)
plot(x=Sepal.Length, y=Petal.Width,
xlab="Sepal Length", ylab="Petal Width")
mod<-lm(Petal.Width ~ Sepal.Length)
mod
abline(mod)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/kellycarscadden/Documents/EBIOcourses/TAmaterial/Evolution3080/Lab2Anoles")
anole <- read.csv("anole_TAversion.csv")
attach(anole)
tapply(total.survivors,list(time,treatment),mean)
#Calculate survival rates
control6mo <- 18.75/29
control12mo <- 15/29
experiment6mo <- 11/44
experiment12mo <- 5/44
#Calculate the proportion of survivors on the ground
proportion <- ground.survivors/total.survivors
#Find the means (table 2)
tapply(proportion,list(time,treatment),mean)
#set up subsets of the data
time_cnt <- time[treatment=="control"]
time_trt <- time[treatment=="experiment"]
prop_cnt <- proportion[treatment=="control"]
prop_trt <- proportion[treatment=="experiment"]
#Plot the data
plot(time_cnt, prop_cnt, xlab="Time (mo.)",
ylab="Proportion Survivors on Ground",
pch=19,col="blue",cex=1.5,ylim=c(0,.6))
points(time_trt, prop_trt,pch=19,
col="red",cex=1.5)
chips <- 5
guests <- 8
avgEat <- 0.4
chips - ((guests + 1) * avgEat)
Self <- c(7, 6, 5, 1, 2, 3, 4)
Penny <- c(5, 7, 6, 3, 1, 2, 4)
Jenny <- c(4, 3, 2, 7, 6, 5, 1)
Lenny <- c(1, 7, 3, 4, 6, 5, 2)
Stewie <- c(6, 7, 5, 4, 3, 1, 2)
Penny[4]
LennyIV <- Lenny[4]
rankings <- cbind(Self, Penny, Jenny, Lenny, Stewie)
str(PennyIV)
PennyIV <- Penny[4]
LennyIV <- Lenny[4]
str(PennyIV)
rankings <- cbind(Self, Penny, Jenny, Lenny, Stewie)
?str
str(Penny)
str(rankings)
rankings
data.frame(Self, Penny, Jenny, Lenny, Stewie)
as.data.frame(Self, Penny, Jenny, Lenny, Stewie)
?as.data.frame
as.data.frame(c(Self, Penny, Jenny, Lenny, Stewie))
as.data.frame(Self, Penny, Jenny, Lenny, Stewie)
?data.frame
data.frame(Self, Penny, Jenny, Lenny, Stewie)
as.data.frame(cbind(Self, Penny, Jenny, Lenny, Stewie))
rankingsDf <- data.frame(Self, Penny, Jenny, Lenny, Stewie)
rankingsDf2 <- as.data.frame(cbind(Self, Penny, Jenny, Lenny, Stewie))
rankingsDf <- data.frame(Self, Penny, Jenny, Lenny, Stewie)
rankingsDf2 <- as.data.frame(cbind(Self, Penny, Jenny, Lenny, Stewie))
str(rankings)
str(rankingsDf)
typeof(rankings)
class(rankings)
class(rankingsDf)
typeof(rankings)
typeof(rankingsDf)
typeof(rankingsDf2)
?typeof
str(rankings)
str(rankingsDf)
dim(rankings)
str(rankingsDf)
dim(rankingsDf)
all(rankings == rankingsDf)
filmNames <- c("I", "II", "III", "IV", "V", "VI", "VII")
row.names(rankings) <- filmNames
rankings
row.names(rankingsDf) <- filmNames
rankingsDf
rankingsDf2
row.names(rankingsDf2) <- filmNames
rankingsDf2
rankings[3,]
rankingsDf[,4]
class(rankings)
rankingsDf
rankingsDf[5,1]
rankingsDf[2,2]
rankingsDf[c(2,5,7),]
rankingsDf[c(4,6),c(2,3,5)]
LennyEp2 <- rankingsDf[2,4]  #save Lenny's Ep. II ranking
rankingsDf[5,4]
LennyEp2
LennyEp2 <- rankingsDf[2,4]  #save Lenny's original Ep. II ranking
rankingsDf[2,4] <- rankingsDf[5,4] #replace Lenny's Ep. II ranking with his Ep. V ranking
rankingsDf[5,4] <- LennyEp2 #replace Lenny's Ep. V ranking with his original Ep. II rank
rankingsDf[,4]
rankings["III","Penny"]
rankingsDf["III", "Penny"]
LennyEp2 <- rankingsDf["II","Lenny"]  #save Lenny's Ep. II ranking
rankingsDf["II","Lenny"] <- rankingsDf["V","Lenny"] #replace Lenny's Ep. II ranking with his Ep. V ranking
rankingsDf["V","Lenny"] <- LennyEp2
rankingsDf[,"Lenny"] #check it worked
rankingsDf$Lenny[2]
LennyEp2 <- rankingsDf$Lenny[2]  #save Lenny's Ep. II ranking
LennyEp2 <- rankingsDf$Lenny[2]  #save Lenny's Ep. II ranking
rankingsDf$Lenny[2] <- rankingsDf$Lenny[5] #replace Lenny's Ep. II ranking with his Ep. V ranking
rankingsDf$Lenny[5] <- LennyEp2
rankingsDf$Lenny #check it worked
rankingsDf2
?sample
?recordPlot
?knitr
?eearch
?esearch
?xml
library(XML)
?esearch
?XML
??XML
getwd()
getwd()
getwd()
ptraits <- read.csv("/Users/kellycarscadden/Documents/MimCollecting/NBexpt_pilot/PilotTraits.csv")
head(ptraits)
str(ptraits)
ptraits <- read.csv("/Users/kellycarscadden/Documents/MimCollecting/NBexpt_pilot/PilotTraits.csv")
head(ptraits)
str(ptraits)
ptraits <- read.csv("/Users/kellycarscadden/Documents/MimCollecting/NBexpt_pilot/PilotTraits.csv")
head(ptraits) #some spaces just empty, w/o '0' or NA - because read dead leaf in as a factor (since contains text to fix)
str(ptraits)
subs <- ptraits[ptraits$sp=="CARD" | ptraits$sp=="LEWI" | ptraits$sp=="MOSC", ]
ptraits$guid <- paste(ptraits$sp, ptraits$popCode, ptraits$ind, sep="_")
ptraits$guid
subs <- ptraits[ptraits$sp=="CARD" | ptraits$sp=="LEWI" | ptraits$sp=="MOSC", ]
?table
with(subs,table(length(unique(guid)),sp))
length(unique(guid))
with(subs,table(guid,sp))
with(subs,tapply(guid,sp,FUN = length(unique))
```
with(subs, ave(as.numeric(guid), sp, FUN=function(x) length(unique(x))))
with(subs, guid, sp, FUN=function(x) length(unique(x))))
with(subs, guid, sp, FUN=function(x) length(unique(x)))
with(subs,tapply(guid,sp,FUN = function(x) length(unique(x)))
with(subs, guid, sp, FUN=function(x) length(unique(x)))
```
with(subs,tapply(guid,sp,FUN = function(x) length(unique(x))))
with(subs,tapply(guid,c(sp,treat),FUN = function(x) length(unique(x))))
with(subs,tapply(guid,c(sp,treat),FUN = function(x) length(unique(x))))
subs
library(ape)
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("Generation" = 1:timeSteps, "Abundance" = n)
#plot the data
plot(abundDat$Generation, abundDat$Abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Population Abundance", main = "Logistic population growth")
#output the data and exit the function
return(abundDat)
}#end function
logGrowthResults <- logGrowthFunc()
getwd()
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab08/")
mySafeWriteCSV <- function(data = NULL, namebase = NULL, writeRowNames = F) {
if(is.null(namebase)) { #check if a file name was provided
warning("Error - no file name given!\n")
} else if (is.null(data)) { #check if data were provided
warning("Error - no data given!\n")
} else {
#remove file extension if present
namebase <- strsplit(namebase, "\\.")[[1]][1]
#create a first name to try with extension
filename <- paste(namebase, ".csv", sep="")
#create a variable to make new names in a logical sequence
counter <- 1
#use a while loop to find an unused name
while(file.exists(filename)) {
filename <- paste(namebase, counter, ".csv", sep="")
counter <- counter + 1
}#end of while
cat(paste("Writing file to '", filename, "'\n", sep=""))
#write the data to a file
write.csv(data, filename, row.names = writeRowNames)
}#end of if-else
}#end of function
mySafeWriteCSV(abundDat, "Carscadden_Lab8_LogisticGrowthData")
mySafeWriteCSV(logGrowthResults, "Carscadden_Lab8_LogisticGrowthData")
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("generations" = 1:timeSteps, "abundance" = n)
#plot the data
plot(abundDat$generations, abundDat$abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Abundance", main = "Logistic population growth")
#output the data and exit the function
return(abundDat)
}#end function
logGrowthResults <- logGrowthFunc()
mySafeWriteCSV(logGrowthResults, "Carscadden_Lab8_LogisticGrowthData")
cat(paste("K <-", K, "\n", sep=""))
