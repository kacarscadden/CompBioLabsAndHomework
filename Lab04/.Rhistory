table(beetraits$Lecty) #3 options (2:4), with the vast majority being 3
table(beetraits$Nest.Mat) #range 1-9
table(beetraits$Pol.Col)
ggpairs(beetraits[,4:10], upper = list(continuous = "cor", combo = "box_no_facet", discrete =
"facetbar", na = "na"), lower = list(continuous = "points", combo =
"facethist", discrete = "facetbar", na = "na"), diag = list(continuous =
"densityDiag", discrete = "barDiag", na = "naDiag"))
library(GGally)
ggpairs(beetraits[,4:10], upper = list(continuous = "cor", combo = "box_no_facet", discrete =
"facetbar", na = "na"), lower = list(continuous = "points", combo =
"facethist", discrete = "facetbar", na = "na"), diag = list(continuous =
"densityDiag", discrete = "barDiag", na = "naDiag"))
?ggpairs
?cor
cor(beetraits$Length.F, beetraits$ITD, method="spearman")
cor(beetraits$Length.F, beetraits$ITD, method="spearman", na.rm=T)
cor(beetraits$Length.F, beetraits$ITD, method="spearman", use=complete.obs)
cor(beetraits$Length.F, beetraits$ITD, method="spearman", use="complete.obs")
head(beecomm)
names(beecomm[4:ncol(beecomm)]
beetraits <- beetraits[order(beecomm)]
names(beecomm[4:ncol(beecomm)])
beetraits <- beetraits[order(names(beecomm[4:ncol(beecomm)])),]
head(beetraits)
?order
beetraits
beetraits <- beetraits[order(beetraits$Spp, descending=F),] #alphebetize sp
order(beetraits$Spp, descending=F)
order(beetraits$Spp)
str(beetraits)
str(beecomm)
beecomm2 <- beecomm[,c(names(beecomm)[1:3], sort(names(beecomm)[4:ncol(beecomm)]))]
str(beecomm2)
names(beecomm)[1:3]
beecomm[, "Her.car"]
beecomm[, c("Site", "Site.Type", "Her.car")]
beecomm2[, c("Site", "Site.Type", "Her.car")]
beecomm[, c("Site", "Site.Type", "Her.car")]
beecomm[, c("Site", "Site.Type", "Her.car")]
identical(beecomm[, c("Site", "Site.Type", "Her.car")], beecomm2[, c("Site", "Site.Type", "Her.car")])
identical(beecomm[, c("Site", "Site.Type", "Osm.caer")], beecomm2[, c("Site", "Site.Type", "Osm.caer")])
head(beetraits)
beetraits2 <- beetraits[order(beetraits$Spp),]
head(beetraits2)
beetraits2$Spp
identical(beetraits2$Spp, names(beecomm2)[4:ncol(beecomm2)])
ncol(beecomm2)
commSp <- names(beecomm2)[4:ncol(beecomm2)]
commSp
traitSp <- beetraits2$Spp
traitSp
str(traitSp)
commSpp <- names(beecomm2)[4:ncol(beecomm2)]
traitSpp <- beetraits2$Spp
str(commSpp)
commSpp <- as.factor(names(beecomm2)[4:ncol(beecomm2)]) #factor to make it comparable to beetraits
missingSp <- commSpp[!commSpp %in% traitSpp]
missingSp
traitSpp[!traitSpp %in% commSpp]
commSpp <- names(beecomm2)[4:ncol(beecomm2)]
traitSpp <- as.character(beetraits2$Spp) #character, to make it comparable to beetraits
commSpp[!commSpp %in% traitSpp]
traitSpp[!traitSpp %in% commSpp]
length(commSpp)
length(traitSpp)
identical(commSpp, traitSpp)
beetraits
str(beetraits)
beetraits[,c(4, 8:10)] <- decostand(beetraits[,c(4, 8:10)], method="standardize", na.rm=T)
beecomm2 <- beecomm[,c(names(beecomm)[1:3], sort(names(beecomm)[4:ncol(beecomm)]))]
beetraits2 <- beetraits[order(beetraits$Spp),]
identical(commSpp, traitSpp) #True
commSpp <- names(beecomm2)[4:ncol(beecomm2)]
traitSpp <- as.character(beetraits2$Spp) #character, to make it comparable to beetraits
identical(commSpp, traitSpp) #True
head(beecomm2)
?abline
rm(list=ls(all=TRUE))
getwd()
dat <- read.csv("CO2_data_cut_paste.csv")
head(dat)
CO2percentChange2 <- matrix(nrow = nrow(dat) - 1, ncol = ncol(dat) - 1, data = NA) #not including a column for years
colnames(CO2percentChange2) <- colnames(dat[-1]) #keep the same column names as original data, minus 'Year'
colnames(CO2percentChange2)
CO2percentChange2 <- as.data.frame(CO2percentChange2) #make this into a data frame
str(CO2percentChange2)
i <- 1
tmp <- dat[,i]
tmp
i <- 2
tmp <- dat[,i]
tmp
i <- 3
tmp <- dat[,i]
tmp
tmp[>0]
str(tmp)
tmp>0
tmp[tmp>0]
tmp[tmp>0][1]
tmp>0
which(tmp>0)
which(tmp>0)[2]
rm(list=ls(all=T))
dat <- read.csv("CO2_data_cut_paste.csv")
rm(list=ls(all=T))
for (i in 1:10) {
print("hi")
}
start <- 10 #Tim starts with $10
allowance <- 5  #weekly allowance of $5
packs <- 2 #Tim buys 2 packs of gum a week
cost <- 1.34 #cost per gum pack
nWeeks <- 8 #number of weeks for which we're tracking Tim's finances
#My approach: consider income & expenses & establish a new 'start' $ amount for the next week
for(i in 1:nWeeks) {
start <- start + allowance - (packs * cost)
print(start)
#print(paste(i,start, sep=". ")) #if you wanted output numbered 1:8, but wrapped in quotes
}
#Q3: Population shrinkage across 7 years
start <- 2000 #population begins with 2000 individuals
growth <- 0.95 #population expected to shrink by 5% each year
nYears <- 7 #tracking the population growth across 7 years
for(i in 1:nYears) {
start <- start * growth
print(start)
}
N <- 2500 #initial population size
K <- 10000 #carrying capacity
r <- 0.8 #intrinsic population growth rate
timeStep <- 12 #total time steps, including present
for(i in 1:timeStep) {  #starting with print, so will also print timeStep 1 population (starting value)
print(N)
N <- N + (r * N * (K - N) / K)
}
len <- 18 #length of desired array
myVector <- rep(0, len)
myVector
for(i in seq(1,len)) {
#store 3x the ith value, in the ith position in the vector
myVector[i] <- 3 * i
}
myVector
myVector2 <- rep(0, len)
myVector2[1] <- 1
myVector2
for(i in 2:len) {
myVector2[i] <- 1 + (2 * myVector2[i-1])
}
myVector2
len <- 20 #looking for 20 Fibonacci numbers
fibNumbers <- rep(NA, len) #create a vector to store the output
fibNumbers[1:2] <- c(0,1) #seed the vector with 2 starting values
for(i in 3:len) {
fibNumbers[i] <- fibNumbers[i-2] + fibNumbers[i-1]
}
fibNumbers
#Q3: Redo Q4 from Part 1, but store the output
steps <- 12
time <- rep(NA, steps) #stores time steps 1:12
time[1] <- 1 #specify first time step as time = 1
abundance <- rep(NA, steps) #stores abundance predicted from discrete-time logistic equation
abundance[1] <- 2500 #fill in 1st time step with starting population size
K <- 10000 #carrying capacity
r <- 0.8 #intrinsic population growth rate
for(i in 2:steps) {
time[i] <- i  #counts the time steps
abundance[i] <- abundance[i-1] + (r * abundance[i-1] * (K - abundance[i-1]) / K)
}
#check the output
time
abundance
#plot the results
plot(time, abundance, xlab="Time step", ylab="Abundance", main="Discrete-time logistic growth")
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab04")
dat <- read.csv("CO2_data_cut_paste.csv")
head(dat)
str(dat)
CO2percentChange <- matrix(nrow = nrow(dat) - 1, ncol = ncol(dat), data = NA)
colnames(CO2percentChange) <- colnames(dat) #keep the same column names as original data
colnames(CO2percentChange)
CO2percentChange <- as.data.frame(CO2percentChange) #make this into a data frame
CO2percentChange$Year <- dat$Year[-1]
str(CO2percentChange) #looks as expected
for(i in 2:ncol(dat)) {
#pull out just that column
tmp <- dat[,i]
#calculate percent change across years, from j-1 to j
#each row is a year, in the original data
for (j in 2:length(tmp)) {
CO2percentChange[j-1,i] <- ((tmp[j] - tmp[j-1]) / tmp[j-1]) * 100
} #end of years loop
}
CO2percentChange
write.csv(CO2percentChange, "YearlyPercentChangesInCO2.csv")
CO2percentChange2 <- matrix(nrow = nrow(dat) - 1, ncol = ncol(dat), data = NA)
colnames(CO2percentChange2) <- colnames(dat) #keep the same column names as original data
CO2percentChange2 <- as.data.frame(CO2percentChange2) #make this into a data frame
CO2percentChange$Year <- dat$Year[-1]
CO2percentChange2$Year <- dat$Year[-1]
CO2percentChange2
str(CO2percentChange2)
for(i in 2:ncol(dat)) {
#pull out just that column
tmp <- dat[,i]
#determine the first year with non-zero data, for this column
#this will be the reference point from which percent change for each year is determined
reference <- tmp[tmp>0][1]
#calculate percent change from year j to reference year
#each row is a year, in the original data
#begin loop in year AFTER the 1st non-zero (reference) year
startYear <- which(tmp>0)[2]
for (j in startYear:length(tmp)) {
CO2percentChange2[j-1,i] <- ((tmp[j] - reference) / reference) * 100
} #end of years loop
}
head(CO2percentChange2)
CO2percentChange2[1:40,]
dat[1:40,]
write.csv(CO2percentChange2, "YearlyPercentChangesInCO2_Bonus.csv")
knitr::opts_chunk$set(echo = TRUE)
DNDS <-read.csv("FlyDnDs.csv") #Opens a dialog box and reads the data from the file you choose
attach(DNDS, warn.conflicts = F)
hist(DnDs, ylab="", xlab="",
main="", ylim=c(0,50), xlim=c(0,2.5))
abline(v=CO1,col="green",lwd=4,lty=3)
lysin <-read.csv("COIDnDs.csv") #Opens a dialog box and reads the data from the file you choose
attach(lysin, warn.conflicts = F) #Connects the variable name with the data
#Get the data for the cytochrome oxidase gene
COI <-read.csv("LysinDnDs.csv") #Opens a dialog box and reads the data from the file you choose
attach(COI, warn.conflicts = F)
#Create empty plot space
plot(NA,NA, xlim=c(0,151), ylim=c(0,5), xlab="Codon", ylab="Dn/Ds")
#add line for "Codon" versus "CO1Ratio" variables
lines(Codon, CO1Ratio, col="green", lwd=3)
plot(NA,NA, xlim=c(0,151), ylim=c(0,5), xlab="Codon", ylab="Dn/Ds")
#add line for "Codon" versus "CO1Ratio" variables
lines(Codon, CO1Ratio, col="green", lwd=3)
#############################################
# add line for  "Codon" versus "LysinRatio" #
#############################################
lines(Codon, LysinRatio, col="green", lwd=3)
###########################
# fill in legend details! #
###########################
legend("topright", c("CO1", "Lysin"), pch = rep(16,2), col = c("green", "blue"))
######################################
# add a horizontal line where y = 1. #
######################################
abline(h=1)
plot(NA,NA, xlim=c(0,151), ylim=c(0,5), xlab="Codon", ylab="Dn/Ds")
#add line for "Codon" versus "CO1Ratio" variables
lines(Codon, CO1Ratio, col="green", lwd=3)
#############################################
# add line for  "Codon" versus "LysinRatio" #
#############################################
lines(Codon, LysinRatio, col="blue", lwd=3)
###########################
# fill in legend details! #
###########################
legend("topright", c("CO1", "Lysin"), pch = rep(16,2), col = c("green", "blue"))
######################################
# add a horizontal line where y = 1. #
######################################
abline(h=1)
#calculate the average DN/Ds for the two genes
CO1 <- mean(CO1Ratio,na.rm=TRUE)
Lysin <- mean(LysinRatio,na.rm=TRUE)
hist(DnDs, ylab="", xlab="",
main="", ylim=c(0,50), xlim=c(0,2.5))
#####################################
# add a horizontal line where y = 0 #
#####################################
abline(h=0)
#create vertical lines fpr the average DN/DS values of our two genes of interest
abline(v=CO1,col="green",lwd=4,lty=3)
abline(v=Lysin,col="red",lwd=4,lty=3)
#calculate the average for the random genes
random <- mean(DnDs)
#draw vertical line for the average of random genes
abline(v=random,lwd=2)
hist(DnDs, ylab="", xlab="",
main="", ylim=c(0,50), xlim=c(0,2.5))
#####################################
# add a horizontal line where y = 0 #
#####################################
abline(h=0)
#create vertical lines fpr the average DN/DS values of our two genes of interest
abline(v=CO1,col="green",lwd=4,lty=3)
abline(v=Lysin,col="red",lwd=4,lty=3)
#calculate the average for the random genes
random <- mean(DnDs)
#draw vertical line for the average of random genes
abline(v=random,lwd=2)
###########################
# fill in legend details! #
###########################
legend("topright", c("Avg for CO1","Avg of random genes","Avg for Lysin"), pch=rep(16,3), col=c("green","black","red"))
getwd()
getwd()
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab05")
x <- 7 #Choose a starting value
#Use an if-else statement to check if x > 5
if(x > 5) {
cat(paste("The value of x is > 5"))
} else {
cat(paste("The value of x is < or = 5"))
}
if(x > 5) {
cat(paste("The value of x is > 5"))
} else {
cat(paste("The value of x is < or = 5"))
}
x <- 2 #Choose a starting value
#Use an if-else statement to check if x > 5
if(x > 5) {
cat(paste("The value of x is > 5"))
} else {
cat(paste("The value of x is < or = 5"))
}
myVec <- read.csv("Vector1.csv")
str(myVec)
for(i in 1:length(myVec)) {
if(myVec[i] < 0){
#replace negative numbers with NA
myVec[i] <- NA
} #end if loop
} #end for loop
#Check it worked by looking for negative values
min(myVec)
myVec[1]
str(myVec)
myVec[[1]]
myVec <- read.csv("Vector1.csv")
str(myVec)
myVec[1]
myVec <- as.numeric(myVec)
str(myVec)
myVec <- unlist(myVec[1,])
str(myVec)
myVec <- read.csv("Vector1.csv")
myVec <- unlist(myVec)
str(myVec)
myVec <- read.csv("Vector1.csv")
myVec <- unname(unlist(myVec)) #Also remove meaningless names (x1, x2, ...)
str(myVec) #Is a named numeric vector
myVec[1]
for(i in 1:length(myVec)) {
if(myVec[i] < 0){
#replace negative numbers with NA
myVec[i] <- NA
} #end if loop
} #end for loop
#Check it worked by looking for negative values
min(myVec)
min(myVec, na.omit)
?min
min(myVec, na.rm=T)
is.na(myVec)
which(is.na(myVec))
myVec[which(is.na(myVec))]
myVec[which(is.na(myVec))] <- 0
myVec[1:20]
which(myVec >= 50)
which(myVec >= 50 & myVec <= 100)
myVecSubset <- myVec[which(myVec >= 50 & myVec <= 100)]
myVecSubset
range(myVecSubset)
CO2 <- read.csv("CO2_data_cut_paste.csv") #read in CO2 data from last week (now in Lab05 folder)
names(CO2)
CO2[,3]
which(CO2[,3] != 0)
nonZeroYrs <- which(CO2[,3] != 0)
CO2[nonZeroYrs[1],1] #Output the Year value corresponding to the first non-zero gas value seen
str(CO2)
summary(CO2[,3])
yrsWithinRange <- which(CO2[,2] >= 200 & CO2[,2] <= 300)
CO2[yrsWithinRange,1]
preyPop <- c(initPrey,rep(NA, totalGenerations-1)) #Space for prey abundance, starting with initial abundance
initPrey <- 100  #initial prey abundance
initPred <- 10  #initial predator abundance
totalGenerations <- 1000
time <- rep(NA, totalGenerations) #create a vector to store time steps ##NOT SURE IF THIS IS THE RIGHT LENGTH
preyPop <- c(initPrey,rep(NA, totalGenerations-1)) #Space for prey abundance, starting with initial abundance
predPop <- c(initPred, rep(NA, totalGenerations-1))
n <- c(initPrey, rep(NA, totalGenerations-1))
#Space for predator abundance, starting with initial abundance
p <- c(initPred, rep(NA, totalGenerations-1))
totalGenerations <- 1000
initPrey <- 100  #Initial prey abundance
initPred <- 10  #Initial predator abundance
a <- 0.01	 #Attack rate
r <- 0.2  #Growth rate of prey
m <- 0.05  #Mortality rate of predators
k <- 0.1 	#Conversion constant of prey into predators
#Create vectors to track time and store output
#Create a vector to store time steps, starting with 1st
time <- c(1, rep(NA, totalGenerations-1))
#Space for prey abundance, starting with initial abundance
n <- c(initPrey, rep(NA, totalGenerations-1))
#Space for predator abundance, starting with initial abundance
p <- c(initPred, rep(NA, totalGenerations-1))
#Write a loop that calculates abundances over time
#Include checks for biological realism - since this is a discrete-time model,
#prey abundance may dip to negative numbers. Check this and make any negatives 0 instead.
for(t in 2:totalGenerations) {
time[t] <- t #tracks each generation
#calculate prey abundance via L-V model
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
#check for any negative prey abundances and set those to 0
if(n[t] < 0) {
n[t] <- 0
} #end of if statement
#calculate predator abundance via L-V model
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
} #end of for loop
str(p)
str(n)
time
plot(time, n, xlab="Generation", ylab="Abundance",
main="Predator and Prey Abundance with the Lotka - Volterra Model",
type="l", col="blue")
lines(time, p, lty=2, col="red")
legend("topright", c("Prey", "Predators"), pch=c(NA,NA), lty=c(1,2), col=c("blue", "red"))
time <- 1:totalGenerations
time
totalGenerations <- 1000
initPrey <- 100  #Initial prey abundance
initPred <- 10  #Initial predator abundance
a <- 0.01	 #Attack rate
r <- 0.2  #Growth rate of prey
m <- 0.05  #Mortality rate of predators
k <- 0.1 	#Conversion constant of prey into predators
#Create vectors to track time and store output
#Create a vector of generations
time <- 1:totalGenerations
#Space for prey abundance, starting with initial abundance
n <- c(initPrey, rep(NA, totalGenerations-1))
#Space for predator abundance, starting with initial abundance
p <- c(initPred, rep(NA, totalGenerations-1))
#Write a loop that calculates abundances over time
#Include checks for biological realism - since this is a discrete-time model,
#prey abundance may dip to negative numbers. Check this and make any negatives 0 instead.
for(t in 2:totalGenerations) {
#calculate prey abundance via L-V model
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
#check for any negative prey abundances and set those to 0
if(n[t] < 0) {
n[t] <- 0
} #end of if statement
#calculate predator abundance via L-V model
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
} #end of for loop
#Check output makes sense by plotting
#Plot the prey first
plot(time, n, xlab="Generation", ylab="Abundance",
main="Predator and Prey Abundance\n with the Lotka - Volterra Model",
type="l", col="blue")
#Layer on the predators
lines(time, p, lty=2, col="red")
#Add a legend
legend("topright", c("Prey", "Predators"), pch=c(NA,NA), lty=c(1,2), col=c("blue", "red"))
length(p)
length(n)
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab04")
dat <- read.csv("CO2_data_cut_paste.csv")
CO2percentChange <- matrix(nrow = nrow(dat) - 1, ncol = ncol(dat), data = NA)
colnames(CO2percentChange) <- colnames(dat) #keep the same column names as original data
colnames(CO2percentChange)
CO2percentChange <- as.data.frame(CO2percentChange) #make this into a data frame
#fill in the Year column with the original data, minus the 1st yr
#percent change listed for a given year (j) will be from year (j-1) to (j)
CO2percentChange$Year <- dat$Year[-1]
str(CO2percentChange) #looks as expected
#for each variable (column), after 'Year'
for(i in 2:ncol(dat)) {
#pull out just that column
tmp <- dat[,i]
#calculate percent change across years, from j-1 to j
#each row is a year, in the original data
for (j in 2:length(tmp)) {
CO2percentChange[j-1,i] <- ((tmp[j] - tmp[j-1]) / tmp[j-1]) * 100
} #end of years loop
} #end of variables loop
write.csv(CO2percentChange, "YearlyPercentChangesInCO2.csv", row.names=F)
#BONUS: For each year, calculate percent change from 1st year with non-zero data, write output
#won't be larger than previous output, so using those output dimensions
CO2percentChange2 <- matrix(nrow = nrow(dat) - 1, ncol = ncol(dat), data = NA)
colnames(CO2percentChange2) <- colnames(dat) #keep the same column names as original data
CO2percentChange2 <- as.data.frame(CO2percentChange2) #make this into a data frame
#fill in the Year column with the original data, minus the 1st yr
CO2percentChange2$Year <- dat$Year[-1]
#For each variable (column), after 'Year'
for(i in 2:ncol(dat)) {
#pull out just that column
tmp <- dat[,i]
#determine the first year with non-zero data, for this column
#this will be the reference point from which percent change for each year is determined
reference <- tmp[tmp>0][1]
#calculate percent change from year j to reference year
#each row is a year, in the original data
#begin loop in year AFTER the 1st non-zero (reference) year
startYear <- which(tmp>0)[2]
for (j in startYear:length(tmp)) {
CO2percentChange2[j-1,i] <- ((tmp[j] - reference) / reference) * 100
} #end of years loop
} #end of variables loop
write.csv(CO2percentChange2, "YearlyPercentChangesInCO2_Bonus.csv", row.names=F)
ab_data <- read.csv("Data_file_madeUp.csv")
getwd()
setwd("/Users/kellycarscadden/Documents/EBIOcourses/TAmaterial.Evolution3080/Lab5AntibioticResistance_2016")
