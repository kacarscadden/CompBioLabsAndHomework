library(ape)
library(phangorn)
library(Biostrings)
library(msa)
rm(list=ls(all=T))
library(msa)
library(Biostrings)
library(phangorn)
library(ape)
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab08/")
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("generations" = 1:timeSteps, "abundance" = n)
#plot the data
plot(abundDat$generations, abundDat$abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Abundance", main = "Logistic population growth")
#output the data and exit the function
return(abundDat)
}#end function
#Call the function, save abundance data, and produce a plot
logGrowthResults <- logGrowthFunc()
cat("### Metadata \n")
cat(paste("* Author: Kelly Carscadden \n * Date: Mar 16, 2017 \n
* Overview: The script specifies a logistic growth function and default parameter values (described below). It outputs a data frame of population abundance across generations, creates a plot, and writes the data frame to a .csv file, while ensuring it does not overwrite any existing files. It includes code used to create this metadata file."))
?sink
date()
cat(paste("#Parameters used in discrete-time logistic growth model model run on ", date(),"\n")
)
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab08/")
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("generations" = 1:timeSteps, "abundance" = n)
#plot the data
plot(abundDat$generations, abundDat$abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Abundance", main = "Logistic population growth")
#output the data and exit the function
return(abundDat)
}#end function
#Call the function, save abundance data, and produce a plot
logGrowthResults <- logGrowthFunc()
cat(paste("start <- ", start, "\n", sep=""))
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("generations" = 1:timeSteps, "abundance" = n)
#plot the data
plot(abundDat$generations, abundDat$abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Abundance", main = "Logistic population growth")
#create a source-able file of the parameter values used
sink("Parameters.R")
cat(paste("#Parameters used in discrete-time logistic growth model model run on ",
date(),"\n"))
#Initial abundance
cat(paste("start <- ", start, "\n", sep=""))
#Total generations
cat(paste("timeSteps <-", timeSteps, "\n", sep=""))
#Intrinsic population growth rate
cat(paste("r <-", r, "\n", sep=""))
#Carrying capacity
cat(paste("K <-", K, "\n", sep=""))
sink()
#output the data and exit the function
return(abundDat)
}#end function
#Call the function, save abundance data, and produce a plot
logGrowthResults <- logGrowthFunc()
cat(#Initial abundance)
cat(paste("start <- ", start, "\n", sep=""))
#Total generations
cat(paste("timeSteps <- ", timeSteps, "\n", sep=""))
#Intrinsic population growth rate
cat(paste("r <- ", r, "\n", sep=""))
#Carrying capacity
cat(paste("K <- ", K, "\n", sep=""))
sink()
#output the data and exit the function
return(abundDat)
}#end function
#Call the function, save abundance data, and produce a plot
logGrowthResults <- logGrowthFunc()
```
cat("#Initial abundance")
cat(paste("start <- ", start, "\n", sep=""))
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("generations" = 1:timeSteps, "abundance" = n)
#plot the data
plot(abundDat$generations, abundDat$abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Abundance", main = "Logistic population growth")
#create a source-able file of the parameter values used
sink("Parameters.R")
cat(paste("#Parameters used in discrete-time logistic growth model model run on ",
date(),"\n"))
cat("#Initial abundance \n")
cat(paste("start <- ", start, "\n", sep=""))
cat("#Total generations \n")
cat(paste("timeSteps <- ", timeSteps, "\n", sep=""))
cat("#Intrinsic population growth rate \n")
cat(paste("r <- ", r, "\n", sep=""))
cat("#Carrying capacity \n")
cat(paste("K <- ", K, "\n", sep=""))
sink()
#output the data and exit the function
return(abundDat)
}#end function
#Call the function, save abundance data, and produce a plot
logGrowthResults <- logGrowthFunc()
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("generations" = 1:timeSteps, "abundance" = n)
#plot the data
plot(abundDat$generations, abundDat$abundance, type = "l", col = "blue",
xlab = "Generation", ylab = "Abundance", main = "Logistic population growth")
#create a source-able file of the parameter values used
sink("Parameters.R")
cat(paste("#Parameters used in discrete-time logistic growth model model run on ",
date(),"\n"))
cat("#Initial abundance \n")
cat(paste("start <- ", start, "\n", sep=""))
cat("#Total generations \n")
cat(paste("timeSteps <- ", timeSteps, "\n", sep=""))
cat("#Intrinsic population growth rate \n")
cat(paste("r <- ", r, "\n", sep=""))
cat("#Carrying capacity \n")
cat(paste("K <- ", K, "\n", sep=""))
sink()
#output the data and exit the function
return(abundDat)
}#end function
#Call the function, save abundance data, and produce a plot
logGrowthResults <- logGrowthFunc()
getwd()
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab09")
trapData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv")
head(trapData)
?as.POSIXct
lapply(trapData$DateTime, as.POSIXct(strptime("%d/%m/%Y %H:%M")))
lapply(trapData$DateTime, function(x){as.POSIXct(x, strptime("%d/%m/%Y %H:%M"))})
lapply(trapData$DateTime, function(x){as.POSIXct(x, strptime(x,format="%d/%m/%Y %H:%M"))})
?as.POSIXct
lapply(trapData$DateTime, function(x){as.POSIXct(x, tz=EAT, strptime(x,format="%d/%m/%Y %H:%M"))})
lapply(trapData$DateTime, function(x){as.POSIXct(x, tz="EAT", strptime(x,format="%d/%m/%Y %H:%M"))})
trapData$DateTime
?strptime
lapply(trapData$DateTime,
function(x){
as.POSIXct(x=x, tz="EAT", strptime(x,format="%d/%m/%Y %H:%M"))
})
?as.POSIXct
as.POSIXct(x, tz="EAT", strptime(x,format="%d/%m/%Y %H:%M"))
as.POSIXct(x, tz="EAT", strptime(trapData$DateTime[1],format="%d/%m/%Y %H:%M")
)
strptime(trapData$DateTime[1],format="%d/%m/%Y %H:%M")
strptime(trapData$DateTime[1],format="%d/%m/%Y %H:%M")
