load("bee_tree.rda")
plot(bee_tree.rda)
plot(bee_tree)
fibFunc <- function (n, start){
#pre-allocate, allowing user-specified start, filling in 2nd value that will always be 1
fib <- (start, 1, rep(NA, n-2))
for(i in 3:n){
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of for loop
}# end of function
fibFunc <- function (n, start){
#pre-allocate, allowing user-specified start, filling in 2nd value that will always be 1
fib <- (start, 1, rep(NA, n-2)) {
for(i in 3:n){
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of for loop
}# end of function
fibFunc <- function (n, start){
#pre-allocate, allowing user-specified start, filling in 2nd value that will always be 1
fib <- c(start, 1, rep(NA, n-2))
for(i in 3:n){
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of for loop
}# end of function
fibFunc(10,0)
fibFunc <- function (n, start){
#pre-allocate, allowing user-specified start, filling in 2nd value that will always be 1
fib <- c(start, 1, rep(NA, n-2))
for(i in 3:n){
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of for loop
return(fib) #output the vector of results
}# end of function
fibFunc(10,0)
fibFunc(2,0)
fib <- rep(NA, n)
n<-1
fib <- rep(NA, n)
fib
fibFunc <- function (n, start){
#pre-allocate space
fib <- rep(NA, n)
for(i in 1:n){
if (i = 1) {fib[i] <- start} #enter user-defined starting value
if (i = 2) {fib[i] <- 1} #enter 1, which is always the second value, if desired output >1 long
if (i > 2) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}# end of function
fibFunc <- function (n, start){
#pre-allocate space
fib <- rep(NA, n)
for(i in 1:n) {
if (n = 1) {
fib[i] <- start #enter the user-desired starting value
} else if (n = 2) {
fib[i] <- 1 #enter 1, which is always the second value, if desired output >1 long
} else {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if/else sequence
}#end of for loop
return(fib) #output the vector of results
}
fibFunc <- function (n, start){
#pre-allocate space
fib <- rep(NA, n)
for(i in 1:n) {
if (n = 1) {
fib[i] <- start #enter the user-desired starting value
} else if (n = 2) {
fib[i] <- 1 #enter 1, which is always the second value, if desired output >1 long
} else {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if/else sequence
}#end of for loop
return(fib) #output the vector of results
}# end of function
fibFunc <- function (n, start){
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 1:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc(10,0)
fibFunc <- function (n, start){
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc(10,0)
fibFunc(1,0)
fibFunc(2,1)
trial <- function (n, start){
if(n | start < 0){
print("Warning - negative value given as an argument. Both n and start must be non-negative integers")
}
}
trial(-2,5)
trial(2,-5)
x<-2
class(x)
str(x)
x<-3.2
class(x)
str(x)
as.integer(3.2)
identical(as.integer(3.2),3.2)
testFunc <- function (n, start) {
#Print message if user enters a negative number
if(n | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers")
}
}
testFunc(-2,5)
testFunc(2,-5)
fibFunc <- function (n, start) {
#Print message if user enters a negative number
if(n < 0 | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers")
}
#Print message if user enters a non-integer
if(identical(as.integer(n), n) | identical(as.integer(start), start) == "FALSE") {
cat("Warning - non-integer given as an argument. Both n and start must be non-negative integers")
}
#Print message if user enters a starting value beyond 0 or 1
if(start > 1) {
cat("Warning - starting value > 1 given. Fibonacci sequence should begin with 0 or 1")
}
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc(-0.5,1)
fibFunc <- function (n, start) {
#Print message if user enters a negative number
if(n < 0 | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers")
}
#Print message if user enters a non-integer
if(identical(as.integer(n), n) | identical(as.integer(start), start) == "FALSE") {
cat("Warning - non-integer given as an argument. Both n and start must be non-negative integers")
}
#Print message if user enters a starting value beyond 0 or 1
if(start > 1) {
cat("Warning - starting value > 1 given. Fibonacci sequence should begin with 0 or 1")
}
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc(-0.5,1)
fibFunc(2,-0.5)
fibFunc <- function (n, start) {
#Print message if user enters a negative number
if(n < 0 | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers"\n)
}
#Print message if user enters a non-integer
if(identical(as.integer(n), n) | identical(as.integer(start), start) == "FALSE") {
cat("Warning - non-integer given as an argument. Both n and start must be non-negative integers")
}
#Print message if user enters a starting value beyond 0 or 1
if(start > 1) {
cat("Warning - starting value > 1 given. Fibonacci sequence should begin with 0 or 1")
}
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc <- function (n, start) {
#Print message if user enters a negative number
if(n < 0 | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers\n")
}
#Print message if user enters a non-integer
if(identical(as.integer(n), n) | identical(as.integer(start), start) == "FALSE") {
cat("Warning - non-integer given as an argument. Both n and start must be non-negative integers\n")
}
#Print message if user enters a starting value beyond 0 or 1
if(start > 1) {
cat("Warning - starting value > 1 given. Fibonacci sequence should begin with 0 or 1\n")
}
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc(2,-0.5)
fibFunc <- function (n, start) {
#Print message if user enters a negative number
if(n < 0 | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers\n")
}
#Print message if user enters a non-integer
if(identical(as.integer(n), n) | identical(as.integer(start), start) == "FALSE") {
cat("Warning - non-integer given as an argument. Both n and start must be non-negative integers\n")
}
#Print message if user enters a starting value beyond 0 or 1
if(start != 0 | start != 1) {
cat("Warning - starting value > 1 given. Fibonacci sequence should begin with 0 or 1\n")
}
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}
fibFunc(2,-0.5)
fibFunc <- function (n, start) {
#Print message if user enters a negative number
if(n < 0 | start < 0) {
cat("Warning - negative value given as an argument. Both n and start must be non-negative integers\n")
}
#Print message if user enters a non-integer
if(identical(as.integer(n), n) | identical(as.integer(start), start) == "FALSE") {
cat("Warning - non-integer given as an argument. Both n and start must be non-negative integers\n")
}
#Print message if user enters a starting value beyond 0 or 1
if(start != 0 | start != 1) {
cat("Warning - invalid starting value given. Fibonacci sequence should begin with 0 or 1\n")
}
#pre-allocate space, enter user-defined starting value
fib <- c(start,rep(NA, n-1))
if (n > 1) {
fib[2] <- 1 #enter 1, which is always the second value, if desired output >1 long
}#end of if
if (n > 2) {
for(i in 3:n) {
fib[i] <- fib[i-2] + fib[i-1] #each number is the sum of the two previous
}#end of if
}#end of for loop
return(fib) #output the vector of results
}# end of function
#Testing these warnings
fibFunc(2,-0.5)
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
abundDat <- data.frame("Generation" = 1:timeSteps, "Abundance" = n) #create data frame with time and abund
return(abundDat) #output the data
#plot the data
plot(abundDat$Generation, abundDat$Abundance,
xlab="Generation", ylab="Population Abundance", main="Logistic population growth")
}#end function
logGrowthFunc()
str(abundDat)
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
abundDat <- return(data.frame("Generation" = 1:timeSteps, "Abundance" = n)) #create data frame with time and abund
#return(abundDat) #output the data
#plot the data
plot(abundDat$Generation, abundDat$Abundance,
xlab="Generation", ylab="Population Abundance", main="Logistic population growth")
}#end function
#Checking the function
logGrowthFunc()
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
abundDat <- data.frame("Generation" = 1:timeSteps, "Abundance" = n) #create data frame with time and abund
return(abundDat) #output the data
#plot the data
plot(abundDat$Generation, abundDat$Abundance,
xlab="Generation", ylab="Population Abundance", main="Logistic population growth")
}#end function
#Checking the function
logGrowthFunc()
abundDat
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("Generation" = 1:timeSteps, "Abundance" = n)
#plot the data
plot(abundDat$Generation, abundDat$Abundance,
xlab="Generation", ylab="Population Abundance", main="Logistic population growth")
#output the data and exit the function
return(abundDat)
}
logGrowthFunc()
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("Generation" = 1:timeSteps, "Abundance" = n)
#plot the data
plot(abundDat$Generation, abundDat$Abundance, type="l", col="blue"
xlab="Generation", ylab="Population Abundance", main="Logistic population growth")
#output the data and exit the function
return(abundDat)
}
logGrowthFunc <- function(start = 10, timeSteps = 100, r = 0.8, K = 1000) {
n <- c(start, rep(NA, timeSteps-1)) #pre-allocate, and load in starting population size
for(t in 2:timeSteps) {
n[t] <- n[t-1] + (r * n[t-1] * (K - n[t-1]) / K) #Calculate logistic growth
}#end for loop
#create data frame with time and abund
abundDat <- data.frame("Generation" = 1:timeSteps, "Abundance" = n)
#plot the data
plot(abundDat$Generation, abundDat$Abundance, type="l", col="blue",
xlab="Generation", ylab="Population Abundance", main="Logistic population growth")
#output the data and exit the function
return(abundDat)
}#end function
abundDat <- logGrowthFunc()
abundDat
networkMatrix <- read.csv("SmallAdjacencyMatrix.csv")
gtwd()
getwd()
setwd("/Users/kellycarscadden/Documents/EBIOcourses/CompBioLabsAndHomework/Lab07")
networkMatrix <- read.csv("SmallAdjacencyMatrix.csv")
head(networkMatrix)
networkMatrix <- read.csv("LargeAdjacencyMatrix.csv")
melt(networkMatrix)
??melt
library(reshape)
melt(networkMatrix)
melt(networkMatrix, row, column)
?matrix
pairMat <- matrix(data=NA, nrow=nrow(mat), ncol=ncol(mat), dimnames=c(,c("Row", "Column","Value")))
mat <- networkMatrix
pairMat <- matrix(data=NA, nrow=nrow(mat), ncol=ncol(mat), dimnames=c(,c("Row", "Column","Value")))
pairMat <- matrix(data=NA, nrow=nrow(mat), ncol=ncol(mat), dimnames=c(NULL,c("Row", "Column","Value")))
pairMat <- matrix(data=NA, nrow=nrow(mat), ncol=ncol(mat), dimnames=list(NULL,c("Row", "Column","Value")))
?colnames
pairMat <- matrix(data=NA, nrow=nrow(mat), ncol=ncol(mat))
colnames(pairMat) <- c("Row", "Column", "Value")
pairMat <- matrix(data=NA, nrow=nrow(mat), ncol=3)
colnames(pairMat) <- c("Row", "Column", "Value")
pairMat
